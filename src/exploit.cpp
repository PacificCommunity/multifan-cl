/*
Copyright (C) Pacific Community (SPC)
Refer to COPYRIGHT and LICENSE files in the root of the repository
*/
#define MY_REAL_DOUBLE double
#include "extras.h"
#define USE_NO_LAPACKE
#include "all.hpp"

dvariable exploitation_penalty(dvar_len_fish_stock_history& fsh)
{
  int byear=fsh.nyears-4;
  int nyears=fsh.nyears;
  int nend=nyears-byear+1;
  int bage=5;
  int nage=fsh.nage;
  // this is set up for the albacore
  dvar_matrix exploitation_by_year(byear,fsh.nyears,bage,fsh.nage);
  dvar_vector totnum(byear,nyears);
  dvar_matrix totnum_by_age(byear,nyears,bage,fsh.nage);
  dvar_vector totcatch(byear,nyears);
  totcatch.initialize();
  totnum.initialize();
  totnum_by_age.initialize();
  
  for (int ir=1;ir<=fsh.num_regions;ir++)
  {
    for (int ip=1;ip<=fsh.num_fish_periods(ir);ip++) 
    {
      int yyear=fsh.year(ir,ip);
      if (yyear>=byear)
      {
        for (int fi=1;fi<=fsh.num_fish_incidents(ir,ip);fi++) 
        {                                 
          // totcatch is the total catch by year and age
          totcatch(yyear)+=sum(exp(fsh.catch(ir,ip,fi)(bage,nage)));
        }
      }
    }
  }
  for (int i=byear;i<=fsh.nyears;i++)
  {
    for (int ir=1;ir<=fsh.num_regions;ir++)
    {
      // totnum is the total number of fish at the beginning of year i
      totnum_by_age(i)+=exp(fsh.N(ir,i)(bage,nage));
      totnum(i)+=sum(exp(fsh.N(ir,i)(bage,nage)));
    }
  }
  dvar_vector exploit =elem_div(totcatch,totnum);
  dvariable avgexp=sum(elem_div(totcatch,totnum))/nend;
  MY_DOUBLE_TYPE target_expl=.012; 
  if (fsh.age_flags(75)) target_expl=double(fsh.age_flags(75))/1000.;
  dvariable pen=fsh.age_flags(74)*square(log((1.e-20+avgexp)/target_expl));
/*
  cout <<"exploit.cpp " << totcatch << endl;
  cout <<"exploit.cpp " << totnum << endl;
  cout << "totnum_by_age" <<  endl;
  cout <<"exploit.cpp " << totnum_by_age << endl << endl;
  cout <<"exploit.cpp " << exploit << endl;
  cout << "avgexp = " << avgexp << " pen = " << pen << endl;
  cout << "avgexp = " << avgexp << " pen = " << pen << endl;
  cout << "exp(fsh.N(1,fsh.nyears,1) = " << exp(fsh.N(1,fsh.nyears,1)) << endl;
 */
  return pen;
} 

dvariable calculate_overall_exploitation(dvar_len_fish_stock_history& fsh)
{	
  dvariable totrec=0.0; 
  dvariable totcatch=0.0; 
  for (int i=1;i<=fsh.nyears;i++)
  {
    for (int ii=1;ii<=fsh.num_regions;ii++)
    {
      //totrec+=sum(exp(fsh.N(ii,i)));  // DF corrected 19NOV 03
      totrec+=exp(fsh.N(ii,i,1));
    }
  }
  
  for (int ir=1;ir<=fsh.num_regions;ir++)
  {
    for (int ip=1;ip<=fsh.num_fish_periods(ir);ip++) 
    {
      for (int fi=1;fi<=fsh.num_fish_incidents(ir,ip);fi++) 
      {                                 
        // totcatch is the total catch by year and age
        totcatch+=sum(exp(fsh.catch(ir,ip,fi)));
      }
    }
  }
  dvariable exploit =totcatch/totrec;
  return exploit;
} 
